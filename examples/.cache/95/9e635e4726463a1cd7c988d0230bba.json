{"id":"create-stream.html","dependencies":[{"name":"_css_loader","parent":"/home/mayank/chrono/examples/create-stream.html","resolved":"/home/mayank/.npm-global/lib/node_modules/parcel-bundler/src/builtins/css-loader.js"},{"name":"/home/mayank/chrono/package.json","includedInParent":true,"mtime":1741346578572}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Pay-Per-Second SDK Demo</title>\n    <style>body {\n        font-family: Arial, sans-serif;\n        margin: 20px;\n      }\n      button {\n        margin: 10px;\n        padding: 10px 20px;\n        font-size: 16px;\n      }\n      #output {\n        margin-top: 20px;\n        font-size: 18px;\n        color: #333;\n      }\n      .success {\n        color: green;\n      }\n      .error {\n        color: red;\n      }</style>\n  </head>\n  <body>\n    <h1>Pay-Per-Second SDK Demo</h1>\n    <button id=\"connectWallet\">Connect Wallet</button>\n    <button id=\"startStream\" disabled=\"\">Start Stream</button>\n    <button id=\"stopStream\" disabled=\"\">Stop Stream</button>\n    <p id=\"output\">Click \"Connect Wallet\" to begin.</p>\n\n    <script type=\"module\">\n      import { StreamflowSolana, getBN } from \"https://cdn.jsdelivr.net/npm/@streamflow/stream\";\n\n      const rpcUrl = \"https://api.devnet.solana.com\";\n      const client = new StreamflowSolana.SolanaStreamClient(rpcUrl);\n\n      let senderWallet = null; // Connected wallet instance\n      let streamId = null; // Active stream ID\n\n      // Display messages on the page\n      function displayMessage(message, isSuccess = true) {\n        const output = document.getElementById(\"output\");\n        output.textContent = message;\n        output.className = isSuccess ? \"success\" : \"error\";\n      }\n\n      // Connect Wallet Button\n      document.getElementById(\"connectWallet\").addEventListener(\"click\", async () => {\n        try {\n          if (!window.solana || !window.solana.isPhantom) {\n            displayMessage(\"Phantom Wallet not found. Please install it.\", false);\n            return;\n          }\n\n          // Connect to Phantom Wallet\n          const response = await window.solana.connect();\n          senderWallet = window.solana;\n\n          console.log(\"Wallet connected:\", response.publicKey.toString());\n          displayMessage(`Wallet connected: ${response.publicKey.toString()}`);\n          document.getElementById(\"startStream\").disabled = false;\n          document.getElementById(\"stopStream\").disabled = false;\n        } catch (error) {\n          console.error(\"Error connecting wallet:\", error);\n          displayMessage(\"Error connecting wallet. Check the console for details.\", false);\n        }\n      });\n\n      // Start Stream Button\n      document.getElementById(\"startStream\").addEventListener(\"click\", async () => {\n        if (!senderWallet) {\n          displayMessage(\"Please connect your wallet first.\", false);\n          return;\n        }\n\n        const recipientAddress = \"JDCUs2MJ7kbvi5kBQ7Jeo5yEtXMSBfT23PKg8wj6uPdC\"; // Replace with a valid recipient address\n        const tokenId = \"strmRqUCoQUgGUan5YhzUZa6KqdzwX5L6FpUxfmKg5m\"; // Replace with a valid Devnet token mint address\n        const totalAmount = 100; // Total amount of tokens\n        const ratePerSecond = 0.01; // Amount deducted per second\n\n        try {\n          const createParams = {\n            recipient: recipientAddress,\n            tokenId: tokenId,\n            start: Math.floor(Date.now() / 1000),\n            amount: getBN(totalAmount, 9),\n            period: 1,\n            amountPerPeriod: getBN(ratePerSecond, 9),\n            name: \"Pay-per-second stream\",\n            cliff: 0,\n            cliffAmount: getBN(0, 9),\n            canTopup: true,\n            cancelableBySender: true,\n            cancelableByRecipient: false,\n            transferableBySender: false,\n            transferableByRecipient: false,\n            automaticWithdrawal: true,\n            withdrawalFrequency: 60,\n          };\n\n          const result = await client.create(createParams, senderWallet);\n          streamId = result.id;\n\n          console.log(\"Stream created successfully:\", result);\n          displayMessage(`Stream created successfully! ID: ${streamId}`);\n        } catch (error) {\n          console.error(\"Error creating stream:\", error);\n          displayMessage(\"Error creating stream. Check the console for details.\", false);\n        }\n      });\n\n      // Stop Stream Button\n      document.getElementById(\"stopStream\").addEventListener(\"click\", async () => {\n        if (!streamId) {\n          displayMessage(\"No active stream to stop.\", false);\n          return;\n        }\n\n        try {\n          await client.cancel({ id: streamId }, senderWallet);\n          console.log(`Stream ${streamId} stopped successfully.`);\n          displayMessage(`Stream ${streamId} stopped successfully.`);\n          streamId = null; // Reset stream ID\n        } catch (error) {\n          console.error(\"Error stopping stream:\", error);\n          displayMessage(\"Error stopping stream. Check the console for details.\", false);\n        }\n      });\n    </script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"797c3a42c5d6c3489f2184241f7bd180","cacheData":{"env":{}}}